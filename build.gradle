//Easy semantic version based off describe + tags
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--dirty', '--long'
        standardOutput = stdout
    }
    def tagVer = stdout.toString().trim()
    def semVer = (tagVer =~ /v?([\d\.]+)/)[0][1]

    if (tagVer.contains('dev')) {
        semVer += "-SNAPSHOT"
    }
    return semVer
}

description = "Kryptnostic Java client"
group = "com.kryptnostic"
version = getVersionName()

apply plugin: "maven-publish"
apply plugin: "java"
apply plugin: "maven"
apply plugin: "eclipse"
apply plugin: "idea"
apply from: "publish.gradle"
apply plugin: "jacoco"

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    url 'http://artifactory.krypt.int/artifactory/libs-release/'
  }
  maven {
    url 'http://artifactory.krypt.int/artifactory/libs-snapshot/'
  }
  maven {
    url 'http://artifactory.krypt.int/artifactory/remote-repos/'
  }
  maven {
    url "http://maven.springframework.org/snapshot"
  }
  maven {
    url  "http://maven.springframework.org/milestone"
  }
  maven {
   url "http://repo.maven.apache.org/maven2"
  }
  maven {
   url "https://oss.sonatype.org/content/repositories/snapshots"
  }
  maven {
    url "https://build.shibboleth.net/nexus/content/groups/public/"
  }
}

ext.fhe_core_version='0.1.2-SNAPSHOT'
ext.kodex_version='3.1.2-SNAPSHOT'
ext.retrofit_version='1.9.0'
ext.jackson_version='2.4.4'
dependencies {
    /*
     * SL4J + LOG4J
     * Currently use Log4J through sl4j.
     * TODO: Switch to logback
     */
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.12'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.12'
    compile "org.apache.logging.log4j:log4j:2.3"

    /*
     * GUAVA
     * EventBus, FluentIterables, ListenableFutures and more
     */
    compile 'com.google.guava:guava:18.0'

    /*
     JODA TIME - A better datetime class.
     */
    compile 'joda-time:joda-time:2.8.2'


    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"

    /*
     * APACHE COMMONS
     * Logging, StringUtils, RandomStringUtils, IOUtils, and more
     */

    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    //compile 'commons-logging:commons-logging:1.1.3'
    compile 'commons-collections:commons-collections:3.2.1'

    if( project.hasProperty('developmentMode') && project.developmentMode ) {
      logger.quiet("$project.name is using project dependencies")
      compile project(":fhe-core:kryptnostic-api")
      compile project(":fhe-core:kryptnostic-core")
      compile project(":kodex")
      testCompile project(path: ":kodex", configuration: "tests")
    } else {
      logger.quiet("$project.name is using jar dependencies")
      compile "com.kryptnostic:kryptnostic-api:${fhe_core_version}"
      compile "com.kryptnostic:kryptnostic-core:${fhe_core_version}"
      compile "com.kryptnostic:kodex:${kodex_version}"
      testCompile "com.kryptnostic:kodex:${kodex_version}:tests"
    }

    compile "com.squareup.retrofit:retrofit:${retrofit_version}"
    compile "com.squareup.okhttp:okhttp:2.3.0"

    /*
     * TESTING
     */
    testCompile "junit:junit:4.11"
    testCompile "org.mockito:mockito-all:1.9.5"
}

task sourcesJar(type : Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
	archives jar,sourcesJar,javadocJar
}

sourceCompatibility=JavaVersion.VERSION_1_7

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility=JavaVersion.VERSION_1_7
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}
